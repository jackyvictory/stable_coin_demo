events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    # 访问日志
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # 基本设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # 安全设置
    server_tokens off;
    
    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=1r/s;
    
    # HTTP 服务器 (支持 HTTPS 重定向和纯 HTTP 模式)
    server {
        listen 80;
        server_name _;
        
        # Let's Encrypt 验证 (HTTPS 模式需要)
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # 根据 SSL 模式决定行为
        # 如果有 SSL 证书，重定向到 HTTPS；否则直接提供 HTTP 服务
        location / {
            # 检查是否存在 SSL 证书文件
            if (-f /opt/evo-payment/ssl/cert.pem) {
                return 301 https://$host$request_uri;
            }
            
            # HTTP 模式下的配置
            try_files $uri $uri/ /index.html;
            
            # 安全头部
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' http://bsc-dataseed1.binance.org http://bsc-dataseed2.binance.org http://bsc-dataseed3.binance.org http://bsc-dataseed4.binance.org https://bsc-dataseed1.defibit.io https://bsc-dataseed2.defibit.io https://bsc-dataseed1.ninicoin.io https://bsc-dataseed2.ninicoin.io;" always;
            
            # Rate limiting
            limit_req zone=general burst=5 nodelay;
        }
        
        # 静态资源缓存 (HTTP 模式)
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            if (-f /opt/evo-payment/ssl/cert.pem) {
                return 301 https://$host$request_uri;
            }
            
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }
        
        # API 路由 (如果需要)
        location /api/ {
            if (-f /opt/evo-payment/ssl/cert.pem) {
                return 301 https://$host$request_uri;
            }
            
            limit_req zone=api burst=20 nodelay;
            return 404;
        }
        
        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 禁止访问隐藏文件
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 禁止访问配置文件
        location ~* \.(conf|config)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # HTTPS 服务器 (仅在有 SSL 证书时启用)
    server {
        listen 443 ssl;
        http2 on;
        server_name _;
        
        # SSL 配置
        ssl_certificate /opt/evo-payment/ssl/cert.pem;
        ssl_certificate_key /opt/evo-payment/ssl/key.pem;
        
        # SSL 安全设置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # 文档根目录
        root /usr/share/nginx/html;
        index index.html index.htm;
        
        # 主页面路由
        location / {
            try_files $uri $uri/ /index.html;
            
            # 安全头部
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' http://bsc-dataseed1.binance.org http://bsc-dataseed2.binance.org http://bsc-dataseed3.binance.org http://bsc-dataseed4.binance.org https://bsc-dataseed1.defibit.io https://bsc-dataseed2.defibit.io https://bsc-dataseed1.ninicoin.io https://bsc-dataseed2.ninicoin.io;" always;
            
            # Rate limiting
            limit_req zone=general burst=5 nodelay;
        }
        
        # 静态资源缓存
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }
        
        # API 路由 (如果需要)
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            return 404;
        }
        
        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 禁止访问隐藏文件
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 禁止访问配置文件
        location ~* \.(conf|config)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}