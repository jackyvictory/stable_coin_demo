openapi: 3.0.3
info:
  title: Stable Coin Payment API
  description: API for handling cryptocurrency payments with stable coins on BNB Smart Chain
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.example.com
    description: Production server
  - url: https://demo.ctbz.xyz
    description: Demo server

paths:
  /api/v1/payments:
    post:
      summary: Create a new payment session
      description: Creates a new payment session for a product purchase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRequest'
      responses:
        '201':
          description: Payment session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentSessionResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/payments/{paymentId}:
    get:
      summary: Get payment session status with blockchain validation
      description: Retrieve the current status of a payment session, automatically checking blockchain status for pending payments
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the payment session
      responses:
        '200':
          description: Payment session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentSessionResponse'
        '404':
          description: Payment session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  
  /api/v1/tokens:
    get:
      summary: Get supported tokens
      description: Retrieve a list of supported tokens
      responses:
        '200':
          description: Tokens retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/networks:
    get:
      summary: Get supported networks
      description: Retrieve a list of supported networks
      responses:
        '200':
          description: Networks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworksResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/stats/payments:
    get:
      summary: Get payment statistics
      description: Retrieve payment statistics and analytics
      responses:
        '200':
          description: Payment statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/stats/monitoring:
    get:
      summary: Get monitoring performance statistics
      description: Retrieve blockchain monitoring and performance statistics
      responses:
        '200':
          description: Monitoring statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoringStatsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/stats/system:
    get:
      summary: Get system health statistics
      description: Retrieve system health and performance statistics
      responses:
        '200':
          description: System statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/stats/websocket:
    get:
      summary: Get WebSocket connection statistics
      description: Retrieve WebSocket connection statistics for both frontend and blockchain
      responses:
        '200':
          description: WebSocket statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSocketStatsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/stats/websocket/messages:
    get:
      summary: Get WebSocket message logs
      description: Retrieve recent WebSocket message logs from both frontend and blockchain
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
          description: Number of messages to retrieve (default 50, max 1000)
      responses:
        '200':
          description: WebSocket messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSocketMessagesResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      summary: Health check
      description: Check the health status of the API service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '500':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# WebSocket Endpoints (Not part of REST API)
# WebSocket connection endpoint: /ws/payments/{paymentId}
# Description: Establishes a WebSocket connection for real-time payment status updates
# Authentication: Payment ID must be valid and correspond to an existing payment session
# Message Format: JSON messages as defined in WebSocketMessage schema components
# Connection Flow:
# 1. Client connects to /ws/payments/{paymentId} with a valid payment ID
# 2. Server validates payment ID and establishes connection
# 3. Server sends connection_ack message upon successful connection
# 4. Server sends payment_status_update messages when payment status changes
# 5. Server sends error messages for any issues
# 6. Client and server exchange ping/pong messages to maintain connection

components:
  schemas:
    CreatePaymentRequest:
      type: object
      required:
        - productId
        - productName
        - amount
        - currency
        - tokenSymbol
        - networkId
        - receiverAddress
      properties:
        productId:
          type: string
          example: "peanut"
          description: Product identifier
        productName:
          type: string
          example: "Peanuts"
          description: Product name
        amount:
          type: number
          format: float
          example: 1.00
          description: Payment amount
        currency:
          type: string
          example: "USD"
          description: Currency type
        tokenSymbol:
          type: string
          example: "USDT"
          description: Token symbol
        networkId:
          type: string
          example: "BSC"
          description: Network identifier
        receiverAddress:
          type: string
          example: "0xe27577B0e3920cE35f100f66430de0108cb78a04"
          description: Receiver wallet address

    
    PaymentSessionResponse:
      type: object
      properties:
        paymentId:
          type: string
          example: "pay_1234567890"
          description: Unique payment identifier
        productId:
          type: string
          example: "peanut"
        productName:
          type: string
          example: "Peanuts"
        amount:
          type: number
          format: float
          example: 1.00
        currency:
          type: string
          example: "USD"
        tokenSymbol:
          type: string
          example: "USDT"
        networkId:
          type: string
          example: "BSC"
        receiverAddress:
          type: string
          example: "0xe27577B0e3920cE35f100f66430de0108cb78a04"
        senderAddress:
          type: string
          example: "0xabcdef1234567890abcdef1234567890abcdef12"
        status:
          type: string
          enum: [created, pending, paid, expired, failed]
          example: "created"
        qrCodeData:
          type: string
          example: "0xe27577B0e3920cE35f100f66430de0108cb78a04?amount=1.00"
        transactionHash:
          type: string
          example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        blockNumber:
          type: integer
          example: 12345678
        confirmedAt:
          type: string
          format: date-time
          example: "2023-12-31T23:35:15Z"
        expiresAt:
          type: string
          format: date-time
          example: "2023-12-31T23:59:59Z"
        createdAt:
          type: string
          format: date-time
          example: "2023-12-31T23:29:59Z"

    TokensResponse:
      type: object
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/Token'

    Token:
      type: object
      properties:
        symbol:
          type: string
          example: "USDT"
        name:
          type: string
          example: "Tether USD"
        contractAddress:
          type: string
          example: "0x55d398326f99059fF775485246999027B3197955"
        decimals:
          type: integer
          example: 18
        networkId:
          type: string
          example: "BSC"
        enabled:
          type: boolean
          example: true

    NetworksResponse:
      type: object
      properties:
        networks:
          type: array
          items:
            $ref: '#/components/schemas/Network'

    Network:
      type: object
      properties:
        id:
          type: string
          example: "BSC"
        name:
          type: string
          example: "BNB Smart Chain"
        chainId:
          type: integer
          example: 56
        rpcUrl:
          type: string
          example: "https://bsc-dataseed1.binance.org/"
        websocketUrl:
          type: string
          example: "wss://bsc-ws-node.nariox.org"
        blockExplorer:
          type: string
          example: "https://bscscan.com"
        enabled:
          type: boolean
          example: true

    PaymentStatsResponse:
      type: object
      properties:
        total_payments:
          type: integer
          example: 0
        successful_payments:
          type: integer
          example: 0
        failed_payments:
          type: integer
          example: 0
        success_rate:
          type: number
          format: float
          example: 0.0
        payments_by_token:
          type: object
          additionalProperties:
            type: integer
          example: {}
        payments_by_period:
          type: object
          additionalProperties:
            type: integer
          example: {}
        average_processing_time:
          type: number
          format: float
          example: 0.0
        failure_reasons:
          type: object
          additionalProperties:
            type: integer
          example: {}

    MonitoringStatsResponse:
      type: object
      properties:
        websocket_connections:
          type: object
          additionalProperties:
            type: integer
          example:
            active: 0
            healthy: 0
            degraded: 0
        blockchain_monitoring:
          type: object
          additionalProperties:
            type: object
          example:
            average_latency: 0
            last_block_processed: 0
            blocks_behind: 0
            events_detected: 0
        validation_performance:
          type: object
          additionalProperties:
            type: object
          example:
            average_validation_time: 0.0
            validation_success_rate: 0.0

    SystemStatsResponse:
      type: object
      properties:
        uptime:
          type: integer
          example: 0
        cpu_usage:
          type: number
          format: float
          example: 0.0
        memory_usage:
          type: number
          format: float
          example: 0.0
        disk_usage:
          type: number
          format: float
          example: 0.0
        api_response_time:
          type: integer
          example: 0
        error_rate:
          type: number
          format: float
          example: 0.0
        database_health:
          type: string
          example: "unknown"
        blockchain_connection:
          type: string
          example: "unknown"

    WebSocketStatsResponse:
      type: object
      properties:
        frontend:
          type: object
          description: Frontend WebSocket connection statistics
          additionalProperties:
            type: object
          example:
            totalConnections: 0
            activeConnections: 0
            connectionErrors: 0
        blockchain:
          type: object
          description: Blockchain WebSocket connection statistics
          additionalProperties:
            type: object
          example:
            isConnected: false
            currentEndpoint: null
            totalConnectionAttempts: 0
            reconnectAttempts: 0
            activeSubscriptions: 0

    WebSocketMessagesResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/WebSocketMessageLog'
        count:
          type: integer
          example: 10

    WebSocketMessageLog:
      type: object
      properties:
        source:
          type: string
          enum: [frontend, blockchain]
          example: "frontend"
        type:
          type: string
          example: "payment_status_update"
        paymentId:
          type: string
          example: "pay_1234567890"
        direction:
          type: string
          enum: [in, out]
          example: "out"
        data:
          type: object
          description: Message payload data
          example:
            status: "paid"
            transactionHash: "0x1234567890abcdef..."
            blockNumber: 12345678
            confirmations: 3
            amount: "10.00"
            token: "USDT"
        timestamp:
          type: string
          format: date-time
          example: "2023-12-01T10:30:00Z"

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "ok"
        message:
          type: string
          example: "Payment API is running"

    Error:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Invalid request data"
        details:
          type: string
          example: "Missing required field: productId"

    # WebSocket message schemas
    WebSocketMessage:
      oneOf:
        - $ref: '#/components/schemas/WebSocketConnectionAck'
        - $ref: '#/components/schemas/WebSocketPaymentStatusUpdate'
        - $ref: '#/components/schemas/WebSocketErrorMessage'
        - $ref: '#/components/schemas/WebSocketPingPong'

    WebSocketConnectionAck:
      type: object
      properties:
        type:
          type: string
          example: "connection_ack"
        paymentId:
          type: string
          example: "pay_1234567890"
        data:
          type: object
          properties:
            status:
              type: string
              example: "connected"
            sessionId:
              type: string
              example: "sess_0987654321"
        timestamp:
          type: string
          format: date-time
          example: "2023-12-01T10:30:00Z"

    WebSocketPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          example: "payment_status_update"
        paymentId:
          type: string
          example: "pay_1234567890"
        data:
          type: object
          properties:
            status:
              type: string
              enum: [created, pending, paid, expired, failed]
              example: "paid"
            transactionHash:
              type: string
              example: "0x1234567890abcdef..."
            blockNumber:
              type: integer
              example: 12345678
            confirmations:
              type: integer
              example: 3
            amount:
              type: string
              example: "10.00"
            token:
              type: string
              example: "USDT"
        timestamp:
          type: string
          format: date-time
          example: "2023-12-01T10:30:00Z"

    WebSocketErrorMessage:
      type: object
      properties:
        type:
          type: string
          example: "error"
        paymentId:
          type: string
          example: "pay_1234567890"
        data:
          type: object
          properties:
            code:
              type: integer
              example: 400
            message:
              type: string
              example: "Invalid payment ID"
        timestamp:
          type: string
          format: date-time
          example: "2023-12-01T10:30:00Z"

    WebSocketPingPong:
      type: object
      properties:
        type:
          type: string
          enum: [ping, pong]
          example: "ping"
        paymentId:
          type: string
          example: "pay_1234567890"
        timestamp:
          type: string
          format: date-time
          example: "2023-12-01T10:30:00Z"